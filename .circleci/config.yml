version: 2.1

commands:
  destroy_infrastructure:
    steps:
      - run:
          name: Delete Stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name alx-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name alx-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
  query_ips:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Tar
          command: yum install -y tar
      - run:
          name: Install Tar
          command: yum install -y gzip
      - run: mkdir ${CIRCLE_WORKFLOW_ID:0:5}
      - run: echo [ubuntu] >> ${CIRCLE_WORKFLOW_ID:0:5}/inventory.txt
      - run: cat ${CIRCLE_WORKFLOW_ID:0:5}/inventory.txt
      - run:
          name: Query Ip Addresses
          command: |
            aws ec2 describe-instances --query Reservations[*].Instances[*].PublicIpAddress --output text >> ${CIRCLE_WORKFLOW_ID:0:5}/inventory.txt
      - run: cat ${CIRCLE_WORKFLOW_ID:0:5}/inventory.txt
      - persist_to_workspace:
          root: ${CIRCLE_WORKFLOW_ID:0:5}
          paths:
            - inventory.txt
      - destroy_infrastructure
  smoke_test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run: apk add --update curl
      - run:
          name: Install Tar
          command: apk add --update tar
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
  configure_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Tar
          command: yum install -y tar
      - run:
          name: Install Tar
          command: yum install -y gzip
      - attach_workspace:
          at: ${CIRCLE_WORKFLOW_ID:0:5}
      - run: cat ${CIRCLE_WORKFLOW_ID:0:5}/inventory.txt
      - add_ssh_keys:
          fingerprints: 
            - 42:37:d3:5b:62:1e:a7:5c:0b:4b:92:d7:5f:7d:0b:de
            - 80:3c:69:c1:d7:88:81:8f:34:6f:c7:a9:91:43:37:89
      - run:
          name: Install dependencies
          command: |
            yum update
      - run:
          name: Install python3
          command: yum install -y python38
      - run:
          name: Install dependencies
          command: pip3 install ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ${CIRCLE_WORKFLOW_ID:0:5}/inventory.txt main.yml -vvvv
      - destroy_infrastructure
  create_and_deploy_front_end:
    docker:
    - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Execute bucket.yml - Create Cloudformation Stack
        command: |
          aws cloudformation deploy \
          --template-file bucket.yml \
          --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
          --parameter-overrides MyBucketName="ci-cd-lab-evans-${CIRCLE_WORKFLOW_ID:0:7}"
    # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
    - run: aws s3 sync . s3://ci-cd-lab-evans-${CIRCLE_WORKFLOW_ID:0:7} --delete
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name alx-cicd-lab3 \
            --parameter-overrides PipelineID="ci-cd-lab-evans-${CIRCLE_WORKFLOW_ID:0:7}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
workflows:
  default:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
      # - create_infrastructure
      # - query_ips:
      #     requires:
      #       - create_infrastructure
      # - configure_infrastructure:
      #     requires: 
      #       - query_ips
      # - smoke_test
      #     # requires: 
      #     #   - query_ips